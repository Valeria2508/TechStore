// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechStore.Data;

#nullable disable

namespace TechStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241006163820_seeders")]
    partial class seeders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TechStore.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone_Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("TechStore.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_order");

                    b.Property<string>("StateOrder")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("state_order");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TechStore.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "powerful desktop for gaming with the latest hardware.",
                            Name = "gaming desktop",
                            Price = 1500.00m,
                            ProductCategoryId = 1,
                            Quantity = 30
                        },
                        new
                        {
                            Id = 2,
                            Description = "desktop optimized for high-performance tasks like video editing.",
                            Name = "workstation desktop",
                            Price = 1800.00m,
                            ProductCategoryId = 1,
                            Quantity = 15
                        },
                        new
                        {
                            Id = 3,
                            Description = "compact desktop for home or office use.",
                            Name = "compact desktop",
                            Price = 600.00m,
                            ProductCategoryId = 1,
                            Quantity = 60
                        },
                        new
                        {
                            Id = 4,
                            Description = "all-in-one desktop with a sleek design, perfect for space-saving.",
                            Name = "all-in-one desktop",
                            Price = 1200.00m,
                            ProductCategoryId = 1,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 5,
                            Description = "affordable desktop ideal for basic tasks and everyday use.",
                            Name = "budget desktop",
                            Price = 400.00m,
                            ProductCategoryId = 1,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 6,
                            Description = "high-end smartphone with the latest technology and camera.",
                            Name = "flagship smartphone",
                            Price = 1000.00m,
                            ProductCategoryId = 2,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 7,
                            Description = "affordable smartphone with all the essential features.",
                            Name = "budget smartphone",
                            Price = 200.00m,
                            ProductCategoryId = 2,
                            Quantity = 150
                        },
                        new
                        {
                            Id = 8,
                            Description = "smartphone offering a great balance of performance and price.",
                            Name = "mid-range smartphone",
                            Price = 500.00m,
                            ProductCategoryId = 2,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 9,
                            Description = "smartphone built for mobile gaming with enhanced graphics.",
                            Name = "gaming smartphone",
                            Price = 800.00m,
                            ProductCategoryId = 2,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 10,
                            Description = "durable smartphone designed for tough environments.",
                            Name = "rugged smartphone",
                            Price = 600.00m,
                            ProductCategoryId = 2,
                            Quantity = 70
                        },
                        new
                        {
                            Id = 11,
                            Description = "ergonomic wireless mouse with long battery life.",
                            Name = "wireless mouse",
                            Price = 25.00m,
                            ProductCategoryId = 3,
                            Quantity = 200
                        },
                        new
                        {
                            Id = 12,
                            Description = "high-quality mechanical keyboard for precision typing.",
                            Name = "mechanical keyboard",
                            Price = 100.00m,
                            ProductCategoryId = 3,
                            Quantity = 150
                        },
                        new
                        {
                            Id = 13,
                            Description = "smartwatch with fitness tracking and notification features.",
                            Name = "smartwatch",
                            Price = 150.00m,
                            ProductCategoryId = 3,
                            Quantity = 80
                        },
                        new
                        {
                            Id = 14,
                            Description = "compact wireless earbuds with noise-cancelling technology.",
                            Name = "wireless earbuds",
                            Price = 75.00m,
                            ProductCategoryId = 3,
                            Quantity = 250
                        },
                        new
                        {
                            Id = 15,
                            Description = "multi-port usb-c hub for enhanced connectivity.",
                            Name = "usb-c hub",
                            Price = 50.00m,
                            ProductCategoryId = 3,
                            Quantity = 180
                        },
                        new
                        {
                            Id = 16,
                            Description = "comprehensive antivirus software for real-time protection.",
                            Name = "antivirus software",
                            Price = 40.00m,
                            ProductCategoryId = 4,
                            Quantity = 300
                        },
                        new
                        {
                            Id = 17,
                            Description = "complete office suite including word processing and spreadsheets.",
                            Name = "office suite",
                            Price = 120.00m,
                            ProductCategoryId = 4,
                            Quantity = 150
                        },
                        new
                        {
                            Id = 18,
                            Description = "professional-grade photo editing software with advanced tools.",
                            Name = "photo editing software",
                            Price = 200.00m,
                            ProductCategoryId = 4,
                            Quantity = 80
                        },
                        new
                        {
                            Id = 19,
                            Description = "easy-to-use accounting software for small businesses.",
                            Name = "accounting software",
                            Price = 100.00m,
                            ProductCategoryId = 4,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 20,
                            Description = "powerful project management tool for teams and individuals.",
                            Name = "project management software",
                            Price = 150.00m,
                            ProductCategoryId = 4,
                            Quantity = 90
                        });
                });

            modelBuilder.Entity("TechStore.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "powerful desktop computers designed for both home and professional use. From basic models to advanced workstations for intensive tasks, find the right fit for your needs.",
                            Name = "desktp"
                        },
                        new
                        {
                            Id = 2,
                            Description = "discover the latest smartphones with cutting-edge technology. From flagship models to budget-friendly options, we offer devices for every lifestyle",
                            Name = "mobile"
                        },
                        new
                        {
                            Id = 3,
                            Description = "essential tech accessories, including chargers, cases, keyboards, headphones, and more to enhance your experience",
                            Name = "accesories"
                        },
                        new
                        {
                            Id = 4,
                            Description = "software solutions for all your needs, from operating systems and office suites to design, development, and digital security tools.",
                            Name = "sofware"
                        });
                });

            modelBuilder.Entity("TechStore.Models.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("TechStore.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("TechStore.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TechStore.Models.Order", b =>
                {
                    b.HasOne("TechStore.Models.Customer", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("TechStore.Models.Product", b =>
                {
                    b.HasOne("TechStore.Models.ProductCategory", "ProductCategories")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("TechStore.Models.ProductOrder", b =>
                {
                    b.HasOne("TechStore.Models.Order", "Orders")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechStore.Models.Product", "Products")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("TechStore.Models.User", b =>
                {
                    b.HasOne("TechStore.Models.Role", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("TechStore.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TechStore.Models.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("TechStore.Models.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("TechStore.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TechStore.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
